{
    "x在 Modal 里面画 G2": {
        "prefix": "x在 Modal 里面画 G2",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from 'g2';",
            "import 'antd/dist/antd.css';",
            "import { Modal, Button } from 'antd';",
            "class G2DEMO extends React.Component {",
            "  constructor(props) {",
            "  \tsuper(props);",
            "    this.data = [",
            "      {genre: 'Sports', sold: 275},",
            "      {genre: 'Strategy', sold: 115},",
            "      {genre: 'Action', sold: 120},",
            "      {genre: 'Shooter', sold: 350},",
            "      {genre: 'Other', sold: 150},",
            "    ];",
            "  }",
            "  componentDidMount() {",
            "    const chart = new G2.Chart({",
            "      id: 'J-g2',  // 指定图表容器 ID",
            "      height : 300,     // 指定图表高度",
            "      forceFit: true,",
            "    });",
            "    // Step 2: 载入数据源",
            "    chart.source(this.data, {",
            "      genre: {",
            "        alias: '游戏种类' // 列定义，定义该属性显示的别名",
            "      },",
            "      sold: {",
            "        alias: '销售量'",
            "      }",
            "    });",
            "    // Step 3：创建图形语法，绘制柱状图，由 genre 和 sold 两个属性决定图形位置，genre 映射至 x 轴，sold 映射至 y 轴",
            "    chart.interval().position('genre*sold').color('genre')",
            "    // Step 4: 渲染图表",
            "    chart.render();",
            "  }",
            "  ",
            "  render() {",
            "    return (",
            "    \t<div id=\"J-g2\"></div>",
            "    )",
            "  }",
            "};",
            "class App extends React.Component {",
            "  constructor(props) {",
            "    super(props);",
            "    this.state = {",
            "      visible: false, ",
            "    }",
            "  }",
            "  ",
            "  handleOk() {",
            "   \tthis.setState({",
            "      visible: false,",
            "    });",
            "  }",
            "  ",
            "  handleCancel() {",
            "    this.setState({",
            "      visible: false,",
            "    });",
            "  }",
            "  ",
            "  showModal() {",
            "    this.setState({",
            "      visible: true,",
            "    });",
            "  }",
            "  ",
            "  render() {",
            "    return (",
            "    \t<div>",
            "      \t<Button type=\"primary\" onClick={this.showModal.bind(this)}>显示对话框</Button>",
            "        <Modal title=\"G2 Modal\" visible={this.state.visible}",
            "          onOk={this.handleOk.bind(this)} onCancel={this.handleCancel.bind(this)}",
            "        >",
            "          <G2DEMO />",
            "        </Modal>",
            "      </div>",
            "    )",
            "  }",
            "};",
            "ReactDOM.render(<App />, mountNode);",
            ""
        ],
        "description": "x在 Modal 里面画 G2"
    },
    "路径图+动画": {
        "prefix": "路径图+动画",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from 'g2';",
            "import Source from '@ali/datavis-source@0.0.12/dist/index';",
            "  var data = Source.SampleData.lifeExpectancy;",
            "  var Util = G2.Util;",
            "  var Shape = G2.Shape;",
            "  var chart = new G2.Chart({",
            "    id: 'mountNode',",
            "    width: 1000,",
            "    height: 800,",
            "    plotCfg: {",
            "      margin: 80",
            "    },",
            "    animate: false",
            "  });",
            "  // 头尾各缩小一个半径",
            "  function cut(p1, p2, r){",
            "    var k = (p2.y-p1.y)/(p2.x-p1.x);",
            "    var theta = Math.atan(k);",
            "    if (k) {",
            "      p1.x += Math.cos(theta) * r;",
            "      p1.y += Math.sin(theta) * r;",
            "      p2.x -= Math.cos(theta) * r;",
            "      p2.y -= Math.sin(theta) * r;",
            "      return [p1.x , p1.y, p2.x, p2.y];",
            "    }",
            "  }",
            "  function destancePoints(p1, p2){",
            "    return Math.sqrt((p2.y - p1.y)*(p2.y - p1.y) + (p2.x - p1.x)*(p2.x - p1.x));",
            "  }",
            "  Shape.registShape('point', 'animatePoint', {",
            "    drawShape: function(cfg, group){",
            "      var origin = cfg.origin._origin;",
            "      var year = origin.year;",
            "      var circle;",
            "      var text;",
            "      circle = group.addShape('circle', {",
            "        attrs: {",
            "          x: cfg.x,",
            "          y: cfg.y,",
            "          r: 0,",
            "          fill: cfg.color,",
            "          fillOpacity: cfg.opacity",
            "        }",
            "      });",
            "      circle.animate({",
            "        r: cfg.size,",
            "        delay: 120*origin.index",
            "      }, 800, 'easeOutQuad', function(){",
            "        if(year % 20 === 0 && year > 1940){",
            "          text = group.addShape('text', {",
            "            attrs: {",
            "              x: cfg.x,",
            "              y: cfg.y,",
            "              text: year,",
            "              fill: '#333',",
            "              textBaseline: 'middle'",
            "            }",
            "          });",
            "          text.animate({",
            "            x: cfg.x + 15",
            "          }, 450);",
            "        }",
            "      });",
            "      return circle;",
            "    }",
            "  });",
            "  Shape.registShape('path', 'animatePath', {",
            "    drawShape: function(cfg, group){",
            "      var origin = cfg.origin._origin;",
            "      var points = this.parsePoints(cfg.points);",
            "      var nextPoint;",
            "      var line;",
            "      var cutPoints;",
            "      Util.each(points, function(point, index){",
            "        nextPoint = points[index+1];",
            "        if(nextPoint){",
            "          cutPoints = cut(point, nextPoint, 5);",
            "          if(!cutPoints || destancePoints(point, nextPoint) < 10) return;",
            "          line = group.addShape('line', {",
            "            attrs: {",
            "              x1: cutPoints[0],",
            "              y1: cutPoints[1],",
            "              x2: cutPoints[0],",
            "              y2: cutPoints[1],",
            "              stroke: '#999',",
            "              arrow: true",
            "            }",
            "          });",
            "          line.animate({",
            "            x2: cutPoints[2],",
            "            y2: cutPoints[3],",
            "            delay: 120*index",
            "          }, 800, 'easeOutQuad');",
            "        }",
            "      });",
            "    }",
            "  });",
            "  chart.source(data);",
            "  chart.filter('country', ['China']);",
            "  chart.legend({",
            "    position: 'top',",
            "    itemWrap: true",
            "  });",
            "  chart.path()",
            "       .position('income*life')",
            "       .color('country')",
            "       .shape('animatePath');",
            "  chart.point()",
            "       .position('income*life')",
            "       .size(5)",
            "       .color('country')",
            "       .shape('animatePoint');",
            "  chart.render();",
            "var mount = document.getElementById('mountNode');",
            "var img = document.createElement('IMG');",
            "mount.style['text-align'] = 'center';",
            "img.setAttribute('src', 'https://zos.alipayobjects.com/rmsportal/pEKpEUWQFAbGczz.jpg');",
            "img.setAttribute('width', '300px');",
            "img.style.margin = \"0 auto\"",
            "mount.appendChild(img);"
        ],
        "description": "路径图+动画"
    },
    "G2柱状图-最小值设置": {
        "prefix": "G2柱状图-最小值设置",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from 'g2';",
            "var data = [",
            "  {\"province\":\"北京市\", \"population\":70},",
            "  {\"province\":\"天津市\", \"population\":30},",
            "];",
            "// Step 1: 创建 Chart 对象",
            "var chart = new G2.Chart({",
            "  id : 'mountNode',",
            "  width : 500,",
            "  height : 250,",
            "  plotCfg: {",
            "    margin: [20, 60, 80, 120]",
            "  }",
            "});",
            "chart.source(data);",
            "chart.col('population', {min: 0});",
            "chart.axis('province', {",
            "    line: null,",
            "    title: null,",
            "    tickLine: null,",
            "});",
            "chart.axis('population', false);",
            "chart.legend(false);",
            "chart.coord('rect').transpose();",
            "chart.interval().position('province*population').color('province').style({",
            "  fillOpacity: 0.4,",
            "  lineWidth: 2",
            "}).label('population', {label: {",
            "   fill: '#108ee9',",
            "   fontSize: 14,",
            "   textAlign: 'center'",
            "}});",
            "/*",
            "data.forEach(function(obj) {",
            "  console.log(obj);",
            "  chart.guide().text([obj.province, obj.population + 4], obj.population + '', {",
            "   fill: '#108ee9',",
            "   fontSize: 14,",
            "   textAlign: 'center'",
            "  });",
            "});*/",
            "// Step 4: 渲染图标",
            "chart.render();"
        ],
        "description": "G2柱状图-最小值设置"
    },
    "edge 边上显示文本": {
        "prefix": "edge 边上显示文本",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from 'g2';",
            "      var data = [{\"name\": \"dd\",",
            "          \"children\": [{\"name\": \"dd\"},{",
            "            \"name\": \"cluster\",",
            "            \"children\": [{",
            "              \"name\": \"AgglomerativeCluster\",",
            "              \"size\": 3938",
            "            }, {",
            "              \"name\": \"CommunityStructure\",",
            "              \"size\": 3812",
            "            }, {",
            "              \"name\": \"HierarchicalCluster\",",
            "              \"size\": 6714",
            "            }, {",
            "              \"name\": \"MergeEdge\",",
            "              \"size\": 743",
            "            }]}]",
            "                  },{",
            "        \"name\": \"flare\",",
            "        \"children\": [{",
            "          \"name\": \"analytics\",",
            "          \"children\": [{\"name\": \"dd\"},{",
            "            \"name\": \"cluster\",",
            "            \"children\": [{",
            "              \"name\": \"AgglomerativeCluster\",",
            "              \"size\": 3938",
            "            }, {",
            "              \"name\": \"CommunityStructure\",",
            "              \"size\": 3812",
            "            }, {",
            "              \"name\": \"HierarchicalCluster\",",
            "              \"size\": 6714",
            "            }, {",
            "              \"name\": \"MergeEdge\",",
            "              \"size\": 743",
            "            }]",
            "          }, {",
            "            \"name\": \"graph\",",
            "            \"children\": [{",
            "              \"name\": \"BetweennessCentrality\",",
            "              \"size\": 3534",
            "            }, {",
            "              \"name\": \"LinkDistance\",",
            "              \"size\": 5731",
            "            }, {",
            "              \"name\": \"MaxFlowMinCut\",",
            "              \"size\": 7840",
            "            }, {",
            "              \"name\": \"ShortestPaths\",",
            "              \"size\": 5914",
            "            }, {",
            "              \"name\": \"SpanningTree\",",
            "              \"size\": 3416",
            "            }]",
            "          }, {",
            "            \"name\": \"optimization\",",
            "            \"children\": [{",
            "              \"name\": \"AspectRatioBanker\",",
            "              \"size\": 7074",
            "            }]",
            "          }]",
            "        },{",
            "          \"name\": \"animate\",",
            "          \"children\": [{",
            "            \"name\": \"Easing\",",
            "            \"size\": 17010",
            "          }, {",
            "            \"name\": \"FunctionSequence\",",
            "            \"size\": 5842",
            "          }, {",
            "            \"name\": \"interpolate\",",
            "            \"children\": [{",
            "              \"name\": \"ArrayInterpolator\",",
            "              \"size\": 1983",
            "            }, {",
            "              \"name\": \"ColorInterpolator\",",
            "              \"size\": 2047",
            "            }, {",
            "              \"name\": \"DateInterpolator\",",
            "              \"size\": 1375",
            "            }, {",
            "              \"name\": \"Interpolator\",",
            "              \"size\": 8746",
            "            }, {",
            "              \"name\": \"MatrixInterpolator\",",
            "              \"size\": 2202",
            "            }, {",
            "              \"name\": \"NumberInterpolator\",",
            "              \"size\": 1382",
            "            }, {",
            "              \"name\": \"ObjectInterpolator\",",
            "              \"size\": 1629",
            "            }, {",
            "              \"name\": \"PointInterpolator\",",
            "              \"size\": 1675",
            "            }, {",
            "              \"name\": \"RectangleInterpolator\",",
            "              \"size\": 2042",
            "            }]",
            "          }, {",
            "            \"name\": \"ISchedulable\",",
            "            \"size\": 1041",
            "          }, {",
            "            \"name\": \"Parallel\",",
            "            \"size\": 5176",
            "          }, {",
            "            \"name\": \"Pause\",",
            "            \"size\": 449",
            "          }, {",
            "            \"name\": \"Scheduler\",",
            "            \"size\": 5593",
            "          }, {",
            "            \"name\": \"Sequence\",",
            "            \"size\": 5534",
            "          }, {",
            "            \"name\": \"Transition\",",
            "            \"size\": 9201",
            "          }, {",
            "            \"name\": \"Transitioner\",",
            "            \"size\": 19975",
            "          }, {",
            "            \"name\": \"TransitionEvent\",",
            "            \"size\": 1116",
            "          }, {",
            "            \"name\": \"Tween\",",
            "            \"size\": 6006",
            "          }]",
            "        }]",
            "      }];",
            "      function drawNode(cfg, group, collapsed, isLeaf) {",
            "        var x = cfg.x;",
            "        var y = cfg.y;",
            "        var pointSize = 5;",
            "        var width = cfg.size;",
            "        var height = 18;",
            "        var label = cfg.label;",
            "        var shape = group.addShape('rect', {",
            "          attrs: {",
            "            x: x,",
            "            y: y - height / 2 ,",
            "            width: width,",
            "            height: height,",
            "            fill: '#fff',",
            "            cursor: isLeaf ? '' : 'pointer',",
            "            stroke: cfg.color",
            "          }",
            "        });",
            "        if (!isLeaf) {",
            "          x = x - pointSize;",
            "          group.addShape('circle', {",
            "            attrs: {",
            "              r: pointSize,",
            "              x: x,",
            "              y: y,",
            "              fill: '#fff',",
            "              stroke: cfg.color // 可以直接设置颜色 cfg.color，也可以使用映射",
            "            }",
            "          });",
            "          var path = [];",
            "          path.push(['M', x - pointSize/2, y]);",
            "          path.push(['L', x + pointSize/2, y]);",
            "          if (collapsed) {",
            "            path.push(['M', x, y - pointSize/2]);",
            "            path.push(['L', x, y + pointSize/2]);",
            "          }",
            "          group.addShape('path', {",
            "            attrs: {",
            "              path: path,",
            "              stroke: cfg.color",
            "            }",
            "          });",
            "        }",
            "        return shape;",
            "      }",
            "      G2.Shape.registShape('point', 'collapsed', {",
            "        drawShape: function(cfg, group) {",
            "          return drawNode(cfg, group, true)",
            "        }",
            "      });",
            "      G2.Shape.registShape('point', 'expanded', {",
            "        drawShape: function(cfg, group) {",
            "          return drawNode(cfg, group, false);",
            "        }",
            "      });",
            "      G2.Shape.registShape('point', 'leaf', {",
            "        drawShape: function(cfg, group) {",
            "          return drawNode(cfg, group, false, true);",
            "        }",
            "      });",
            "      G2.Shape.registShape('edge', 'joinText', {",
            "        drawShape: function(cfg, group) {",
            "          var origin = cfg.origin; ",
            "          group.addShape('Text', {",
            "            attrs: {",
            "              x: (cfg.x[0] + cfg.x[1])/2,",
            "              y: (cfg.y[0] + cfg.y[1])/2,",
            "              text: '文本',",
            "              fill: '#999'",
            "            }",
            "          });",
            "        }",
            "      });",
            "      var Layout = G2.Layout;",
            "      // 使用layout，用户可以自己编写自己的layout",
            "      // 仅约定输出的节点 存在 id,x，y字段即可",
            "      var layout = new Layout.Tree({",
            "        nodes: data",
            "      });",
            "      var dx = layout.dx;",
            "      var nodes = layout.getNodes();",
            "      var edges = layout.getEdges();",
            "      var Stat = G2.Stat;",
            "      var chart = new G2.Chart({",
            "        id: 'mountNode',",
            "        width: 1000,",
            "        height: 500,",
            "        plotCfg: {",
            "          margin: [20,50]",
            "        },",
            "        animate: false",
            "      });",
            "      // 不显示title",
            "      chart.tooltip({",
            "        title: null",
            "      });",
            "      chart.legend('children', false);",
            "      chart.legend('name', false);",
            "      renderTree(nodes, edges, dx);",
            "      function renderTree(nodes, edges, dx) {",
            "        chart.clear();",
            "        var height = Math.max(500, 26 / dx); // 最小高度 500",
            "        chart.changeSize(1000, height);",
            "        // 首先绘制 edges，点要在边的上面",
            "        // 创建单独的视图",
            "        var edgeView = chart.createView();",
            "        edgeView.source(edges);",
            "        edgeView.coord().transpose(); //",
            "        edgeView.axis(false);",
            "        edgeView.tooltip(false);",
            "        // Stat.link 方法会生成 ..x, ..y的字段类型，数值范围是 0-1",
            "        edgeView.edge()",
            "          .position(Stat.link('source*target',nodes))",
            "          .shape('smooth')",
            "          .color('#ccc');",
            "        function strLen(str) {",
            "          var len = 0;",
            "          for (var i = 0; i < str.length; i ++) {",
            "            if(str.charCodeAt(i) > 0 && str.charCodeAt(i) < 128) {",
            "              len ++;",
            "            } else {",
            "              len += 2;",
            "            }",
            "          }",
            "          return len;",
            "        }",
            "        edgeView.edge()",
            "          .position(Stat.link('source*target',nodes))",
            "          .shape('joinText');",
            "        // 创建节点视图",
            "        var nodeView = chart.createView();",
            "        nodeView.coord().transpose(); //'polar'",
            "        nodeView.axis(false);",
            "        // 节点的x,y范围是 0，1",
            "        // 因为边的范围也是 0,1所以正好统一起来",
            "        nodeView.source(nodes, {",
            "          x: {min: 0,max:1},",
            "          y: {min: 0, max:1},",
            "          value: {min: 0}",
            "        });",
            "        nodeView.point().position('x*y').color('steelblue').size('name', function(name) {",
            "          var length = strLen(name);",
            "          return length * 6 + 5 * 2;",
            "        }).label('name', {",
            "          offset: 6,",
            "          labelEmit: true",
            "        })",
            "          .shape('children*collapsed', function(children,collapsed) {",
            "          if (children) {",
            "            if (collapsed) {",
            "              return 'collapsed';",
            "            } else {",
            "              return 'expanded';",
            "            }",
            "          }",
            "          return 'leaf';",
            "        })",
            "          .tooltip('name*id');",
            "        chart.render();",
            "      }",
            "      chart.on('plotclick', function(ev){",
            "        var shape = ev.shape;",
            "        if (shape) {",
            "          var obj = shape.get('origin');",
            "          var id = obj._origin.id;",
            "          var node = layout.findNode(id);",
            "          if (node && node.children) {",
            "            node.collapsed = !node.collapsed;",
            "            layout.reset();",
            "            nodes = layout.getNodes();",
            "            edges = layout.getEdges();",
            "            dx = layout.dx;",
            "            // edgeView.changeData(edges);",
            "            renderTree(nodes, edges, dx);",
            "          }",
            "        }",
            "      })",
            "var mount = document.getElementById('mountNode');",
            "var img = document.createElement('IMG');",
            "mount.style['text-align'] = 'center';",
            "img.setAttribute('src', 'https://zos.alipayobjects.com/rmsportal/pEKpEUWQFAbGczz.jpg');",
            "img.setAttribute('width', '300px');",
            "img.style.margin = \"0 auto\"",
            "mount.appendChild(img);"
        ],
        "description": "edge 边上显示文本"
    },
    "G2-坐标轴显示图片": {
        "prefix": "G2-坐标轴显示图片",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from 'g2';",
            "var data = [",
            "  {\"name\":\"John\",\"vote\":35654},",
            "  {\"name\":\"Damon\",\"vote\":65456},",
            "  {\"name\":\"Patrick\",\"vote\":45724},",
            "  {\"name\":\"Mark\",\"vote\":13654}",
            "];",
            "var imageMap = {",
            "  'John': 'https://zos.alipayobjects.com/rmsportal/mYhpaYHyHhjYcQf.png',",
            "  'Damon': 'https://zos.alipayobjects.com/rmsportal/JBxkqlzhrlkGlLW.png',",
            "  'Patrick': 'https://zos.alipayobjects.com/rmsportal/zlkGnEMgOawcyeX.png',",
            "  'Mark': 'https://zos.alipayobjects.com/rmsportal/KzCdIdkwsXdtWkg.png'",
            "}",
            "var chart = new G2.Chart({",
            "  id : 'mountNode',",
            "  width : 600,",
            "  height : 250",
            "});",
            "chart.source(data, {",
            "  vote: {",
            "    min: 0",
            "  }",
            "});",
            "chart.legend(false);",
            "chart.axis('name', {",
            "  title: null,",
            "  labels: {",
            "    custom: true,",
            "    renderer: function(value){",
            "      return '<img src=\"' +imageMap[value] + '\" width=\"30px\"/>';",
            "    }",
            "  },",
            "  tickLine: null",
            "});",
            "chart.interval().position('name*vote').color('name', ['#7f8da9', '#fec514', '#db4c3c', '#daf0fd'])/*.shape('name', function(name){",
            "  return ['image-bottom', imageMap[name]]; // 根据具体的字段指定 shape",
            "})*/",
            "  .size(20).label('name');",
            "chart.render();"
        ],
        "description": "G2-坐标轴显示图片"
    },
    "G2 - 格式化柱状图": {
        "prefix": "G2 - 格式化柱状图",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from '@ali/g2';",
            "var colorMap = {",
            "  'Sports': '#4E7CCC', ",
            "  'Strategy': '#36B3C3', ",
            "  'Action': '#4ECDA5', ",
            "  'Shooter': '#94E08A', ",
            "  'Other': '#E2F194',",
            "};",
            "var data = [",
            "  {genre: 'Sports', sold: 275},",
            "  {genre: 'Strategy', sold: 115},",
            "  {genre: 'Action', sold: 120},",
            "  {genre: 'Shooter', sold: 350},",
            "  {genre: 'Other', sold: 150},",
            "];",
            "// Step 1: 创建 Chart 对象",
            "var chart = new G2.Chart({",
            "  id: 'mountNode',",
            "  forceFit: true,",
            "  height: 300",
            "});",
            "chart.source(data, {",
            "  genre: {",
            "    alias: '游戏种类' // 列定义，定义该属性显示的别名",
            "  },",
            "  sold: {",
            "    alias: '销售量'",
            "  }",
            "});",
            "chart.axis('genre', {",
            "  title: null,",
            "  line: null,",
            "  tickLine: null,",
            "  grid: null,",
            "  labelOffset: 15,",
            "  labels: {",
            "    custom: true,",
            "    renderer: function(val) {",
            "      return '<span style=\"color:' + colorMap[val] + ';\">' + val + '</span>';",
            "    }",
            "  }",
            "});",
            "chart.axis('sold', false);",
            "chart.legend(false);",
            "chart.interval().position('genre*sold').color('genre').style({",
            "  fillOpacity: 0.7,",
            "  lineWidth: 5",
            "});",
            "data.forEach(function(obj) {",
            "  // 如果使用 PC 端的 G2，直接使用 .label('sold', {label: {fontSize: 14}}) 方法",
            " chart.guide().text([obj.genre, obj.sold + 5], obj.sold, {",
            "   fill: colorMap[obj.genre],",
            "   fontSize: 14,",
            "   textAlign: 'center'",
            "  });",
            "});",
            "// Step 4: 渲染图表",
            "chart.render();",
            "var mount = document.getElementById('mountNode');",
            "var img = document.createElement('IMG');",
            "mount.style['text-align'] = 'center';",
            "img.setAttribute('src', 'https://zos.alipayobjects.com/rmsportal/pEKpEUWQFAbGczz.jpg');",
            "img.setAttribute('width', '150px');",
            "img.style.margin = \"0 auto\"",
            "mount.appendChild(img);"
        ],
        "description": "G2 - 格式化柱状图"
    },
    "【G2 2.2.x】 连续图例的过滤": {
        "prefix": "【G2 2.2.x】 连续图例的过滤",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import $ from 'jquery';",
            "import G2 from 'g2'",
            "var data = [[0,0,10],[0,1,19],[0,2,8],[0,3,24],[0,4,67],[1,0,92],[1,1,58],[1,2,78],[1,3,117],[1,4,48],[2,0,35],[2,1,15],[2,2,123],[2,3,64],[2,4,52],[3,0,72],[3,1,132],[3,2,114],[3,3,19],[3,4,16],[4,0,38],[4,1,5],[4,2,8],[4,3,117],[4,4,115],[5,0,88],[5,1,32],[5,2,12],[5,3,6],[5,4,120],[6,0,13],[6,1,44],[6,2,88],[6,3,98],[6,4,96],[7,0,31],[7,1,1],[7,2,82],[7,3,32],[7,4,30],[8,0,85],[8,1,97],[8,2,123],[8,3,64],[8,4,84],[9,0,47],[9,1,114],[9,2,31],[9,3,48],[9,4,91]];",
            "  var source = [];",
            "  for (var i = 0; i < data.length; i++) {",
            "    var item = data[i];",
            "    var obj = {};",
            "    obj.name = item[0];",
            "    obj.day = item[1];",
            "    obj.sales = item[2];",
            "    source.push(obj);",
            "  }",
            "  var chart = new G2.Chart({",
            "    id: 'mountNode',",
            "    forceFit: true,",
            "    height: 300",
            "  });",
            "\tchart.setMode('select');",
            "  chart.select('rangeXY');",
            "  chart.source(source, {",
            "    name: {",
            "      type: 'cat',",
            "      values: ['Alexander', 'Marie', 'Maximilian', 'Sophia', 'Lukas', 'Maria', 'Leon', 'Anna', 'Tim', 'Laura']",
            "    },",
            "    day: {",
            "      type: 'cat',",
            "      values: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']",
            "    },",
            "    sales: {",
            "      nice: false",
            "    }",
            "  });",
            "  chart.axis('name', {",
            "    title: null,",
            "    labels: null,",
            "    ticks: null,",
            "    tickLine: null,",
            "    line: null,",
            "    grid: {",
            "      line: {",
            "        stroke: '#d9d9d9',",
            "        lineWidth: 1,",
            "        lineDash: [2, 2]",
            "      }",
            "    }",
            "  });",
            "  chart.axis('day', {",
            "    title: null,",
            "    labels: null,",
            "    ticks: null,",
            "    tickLine: null,",
            "    line: null",
            "  });",
            "  chart.polygon()",
            "    .position('name*day')",
            "    .color('sales', '#f2f2f2-#36B3C3')",
            "    .label('sales', {",
            "      offset: -2,",
            "      label: {",
            "        fill: '#444',",
            "        fontWeight: 'bold'",
            "      }",
            "    })",
            "    .style({",
            "      lineWidth: 1,",
            "      stroke: '#fff'",
            "    })",
            "    .selected({",
            "      selectedMode: 'single',",
            "      style: {",
            "        fill: '#f80',",
            "        fillOpacity: 0.5",
            "      }",
            "  });",
            "  chart.render();",
            "  chart.on('plotdbclick', function(ev) {",
            "    chart.set('filters', {});",
            "    chart.repaint();",
            "  });",
            ""
        ],
        "description": "【G2 2.2.x】 连续图例的过滤"
    },
    "环图+展开树图": {
        "prefix": "环图+展开树图",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from '@ali/g2';",
            "var Util = G2.Util;",
            "var Stat = G2.Stat;",
            "var ColorUtil = G2.ColorCalculate;",
            " var data = [",
            "      {",
            "        id: '1', name: '风险', level: 0, isOuter:'false',children: [",
            "        {id: '11', name: '技术风险', isOuter:'true', level: 1},",
            "        {id: '12', name: '流动性风险', isOuter:'false', level: 1},",
            "        {id: '13', name: '市场风险', isOuter:'false', level: 1}",
            "      ]",
            "      },",
            "      {",
            "        id: '2', name: '产品', level: 0, isOuter:'false', children: [",
            "        {id: '21', name: '产品方案', level: 1, isOuter:'false'},",
            "        {",
            "          id: '22', name: '产品规则', level: 1, isOuter:'false', children: [{",
            "          id: '221', name: '结算产品', level: 2, isOuter:'true'",
            "        }]",
            "        },",
            "        {id: '23', name: '产品周期', level: 1, isOuter:'false'}",
            "      ]",
            "      },",
            "      {",
            "        id: '3', name: '资金', level: 0, isOuter:'false', children: [",
            "        {",
            "          id: '31', name: '资产负债', level: 1, isOuter:'false', children: [{",
            "          id: '311', name: '指标', level: 2, isOuter:'true'",
            "        }, {",
            "          id: '312', name: '报表', level: 2, isOuter:'true'",
            "        }]",
            "        },",
            "        {id: '32', name: '内部核算', level: 1, isOuter:'false'},",
            "        {id: '33', name: '资金管理', level: 1, isOuter:'false'}",
            "      ]",
            "      }",
            "    ];",
            "    var detailData = [",
            "      {",
            "        id: '312', name: '报表',isRoot: 1,level: 2, children: [",
            "        {",
            "          id: '3121', name: '银行余额调节表',level: 3, children: [",
            "          {id: '31121', name: '头寸账面余额', level: 4},",
            "          {id: '31122', name: '未达金额', level: 4},",
            "          {id: '31123', name: '实存余额', level: 4}",
            "        ]",
            "        }",
            "      ]",
            "      },",
            "      {",
            "        id: '11', name: '技术风险',isRoot: 1, level: 1, children: [",
            "        {",
            "          id: '111', name: '日切借贷平衡',level: 2, children: [",
            "          {id: '1111', name: '借方发生额',level: 3},",
            "          {id: '1112', name: '贷方发生额',level: 3}",
            "        ]",
            "        }",
            "      ]",
            "      }",
            "    ];",
            "var outerPoints = {};",
            "var levels = 3; // 固定到仅展示两层",
            "var dx = 0.06; // 节点间的间距, 不进行自适应布局",
            "var dy = 1 / (levels + 3/2);",
            "// 快速布局算法",
            "function layoutNodes () {",
            "  var nodes = [];",
            "  var edges = [];",
            "  Util.each(detailData, function(node) {",
            "    var point = outerPoints[node.id];",
            "    if (point) { // 防止报错，只有在环图中的才进行布局",
            "      node.x = point.x;",
            "      node.y = node.level * dy;",
            "      //node.level = 0;",
            "      nodes.push(node);",
            "      if (node.children) {",
            "        layoutChildren(node.children, node, node.level);",
            "      }",
            "    }",
            "  });",
            "  function layoutChildren(children, parent, level) {",
            "    var count = children.length;",
            "    var parentX = parent.x;",
            "    var startX = parent.x - dx * (count - 1) / 2;",
            "    Util.each(children, function(node, index) {",
            "      node.x = startX + index * dx;",
            "      node.y = parent.y + dy;",
            "      nodes.push(node);",
            "      //node.level = level;",
            "      edges.push({ // 添加边",
            "        source: parent.id,",
            "        target: node.id",
            "      });",
            "      if (node.children) {",
            "        layoutChildren(node.children, node, level + 1);",
            "      }",
            "    });",
            "  }",
            "  return {",
            "    nodes: nodes,",
            "    edges: edges",
            "  }",
            "};",
            "function getPath(points) {",
            "  var path = [];",
            "  points.forEach(function(point, index){",
            "    if (index === 0) {",
            "      path.push(['M', point.x, point.y])",
            "    } else {",
            "      path.push(['L', point.x, point.y]);",
            "    }",
            "  });",
            "  path.push(['L', points[0].x, points[0].y]);",
            "  return path;",
            "}",
            "G2.Shape.registShape('polygon', 'outer', {",
            "  drawShape: function(cfg, group) {",
            "    var points = cfg.points;",
            "    var id = cfg.origin._origin.id;",
            "    var path = [];",
            "    var outerCenter = {",
            "      x: (points[1].x + points[2].x) / 2,",
            "      y: points[1].y + 0.1",
            "    };",
            "    outerPoints[id] = outerCenter; // 用于展开外层节点",
            "    path = getPath(points);",
            "    path = this.parsePath(path);",
            "    var shape = group.addShape('path', {",
            "      attrs: {",
            "        path: path,",
            "        fill: cfg.color",
            "      }",
            "    });",
            "    return shape;",
            "  }",
            "});",
            "G2.Shape.registShape('point', 'node', {",
            "  drawShape: function(cfg, group) {",
            "    var point = cfg.points[0];",
            "    var level = cfg.origin._origin.level;",
            "    var width = - 1 * level * 0.006 + 0.045;",
            "    var heigth = 0.06;",
            "    var points = [",
            "      {x: point.x - width, y: point.y - heigth},",
            "      {x: point.x - width, y: point.y + heigth},",
            "      {x: point.x + width, y: point.y + heigth},",
            "      {x: point.x + width, y: point.y - heigth}",
            "    ];",
            "    ",
            "    var path = getPath(points);",
            "    path = this.parsePath(path);",
            "    var shape = group.addShape('path', {",
            "      attrs: {",
            "        path: path,",
            "        fill: cfg.color,",
            "        cursor: 'pointer'",
            "      }",
            "    });",
            "    return shape;",
            "  }",
            "});",
            "var colors = ['#61A5E8', '#7ECF51', '#EECB5F', '#E4925D'];",
            "var Stat = G2.Stat;",
            "var chart = new G2.Chart({",
            "  id: 'mountNode',",
            "  width: 800,",
            "  height: 800,",
            "  plotCfg: {",
            "    margin: 0",
            "  }",
            "});",
            "chart.source(data);",
            "chart.coord('polar', {",
            "  inner: 0.25,",
            "  radius: 0.55",
            "});",
            "chart.tooltip({",
            "  title: null",
            "});",
            "chart.axis(false);",
            "chart.legend(false);",
            "// 需要将显示tooltip的字段加到语法中，否则无法取到对应的字段例如 name",
            "chart.polygon().position(Stat.tree.rect('children')).color('id*level', function(id, level){",
            "  var prefix = id[0]; // 取第一个字符，指定颜色，实际使用中如果有字段能够标示最顶层节点的分类更好",
            "  var color = colors[prefix];",
            "  var percent = 1 - level * 0.2; // 层级越高，颜色越浅",
            "  var gradient = ColorUtil.gradient(['#ffffff',color]); // 也可以缓存这个渐变计算的函数",
            "  return gradient(percent);",
            "})",
            ".label('name',{",
            "  offset: 0,",
            "  label:{",
            "    fill: '#fff',",
            "    textAlign: 'center'",
            "  }",
            "})",
            ".shape('isOuter', function(isOuter){",
            "  if (isOuter ==='true') {",
            "    return 'outer';",
            "  }",
            "  return 'polygon';",
            "})",
            ".style({",
            "  stroke: '#fff',",
            "  lineWidth: 1",
            "}).tooltip('name');",
            "chart.render();",
            "var rst = layoutNodes();",
            "// 首先绘制 edges，点要在边的上面",
            "// 创建单独的视图",
            "var edgeView = chart.createView();",
            "edgeView.source(rst.edges);",
            "edgeView.coord('polar', {",
            "  inner: 0.4,",
            "  radius: 0.85",
            "});",
            "edgeView.axis(false);",
            "edgeView.tooltip(false);",
            "// Stat.link 方法会生成 ..x, ..y的字段类型，数值范围是 0-1",
            "edgeView.edge()",
            "  .position(Stat.link('source*target',rst.nodes))",
            "  .shape('smooth')",
            "  .color('#ccc');",
            "// 创建节点视图",
            "var nodeView = chart.createView();",
            "nodeView.coord('polar', {",
            "  inner: 0.4,",
            "  radius: 0.85",
            "});",
            "nodeView.axis(false);",
            "// 节点的x,y范围是 0，1",
            "// 因为边的范围也是 0,1所以正好统一起来",
            "nodeView.source(rst.nodes, {",
            "  x: {min: 0,max:1},",
            "  y: {min: 0, max:1}",
            "});",
            "nodeView.point().position('x*y').color('steelblue').label('name*isRoot', function(name, isRoot) {",
            "  if (isRoot) {",
            "    return ''; // 展开的第一层不显示文本，已经在环上展开了",
            "  }",
            "  return name;",
            "}, {",
            "  offset: 0,",
            "  label: {",
            "    fill: '#fff'",
            "  },",
            "  labelEmit: false",
            "})",
            ".color('id', function(id) {",
            "  var prefix = id[0]; // 取第一个字符，指定颜色，实际使用中如果有字段能够标示最顶层节点的分类更好",
            "  var color = colors[prefix];",
            "  return color;",
            "}).tooltip('name')",
            ".shape('isRoot', function(isRoot) {",
            "  if (isRoot) {",
            "    return 'circle';",
            "  }",
            "  return 'node';",
            "});",
            "chart.render();",
            "// 点击事件",
            "chart.on('plotclick', function(ev) {",
            "  var shape = ev.shape;",
            "  if (shape) {",
            "    var id = ev.data._origin.id;",
            "    alert(id);",
            "  }",
            "});"
        ],
        "description": "环图+展开树图"
    },
    "G2-Mobile 定制柱状图样式": {
        "prefix": "G2-Mobile 定制柱状图样式",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import GM from 'g2-mobile';",
            "import jQuery from 'jquery';",
            "jQuery('<canvas id=\"c1\" style=\"width:500px;height:220px;\"></canvas').appendTo('#mountNode');",
            "var colorMap = {",
            "  'Sports': '#4E7CCC', ",
            "  'Strategy': '#36B3C3', ",
            "  'Action': '#4ECDA5', ",
            "  'Shooter': '#94E08A', ",
            "  'Other': '#E2F194',",
            "};",
            "var data = [",
            "  {genre: 'Sports', sold: 275},",
            "  {genre: 'Strategy', sold: 115},",
            "  {genre: 'Action', sold: 120},",
            "  {genre: 'Shooter', sold: 350},",
            "  {genre: 'Other', sold: 150},",
            "];",
            "// Step 1: 创建 Chart 对象",
            "var chart = new GM.Chart({",
            "  id: 'c1'",
            "});",
            "chart.source(data, {",
            "  genre: {",
            "    alias: '游戏种类' // 列定义，定义该属性显示的别名",
            "  },",
            "  sold: {",
            "    alias: '销售量'",
            "  }",
            "});",
            "chart.axis('genre', {",
            "  line: null,",
            "  tickLine: null,",
            "  grid: null,",
            "  labelOffset: 6,",
            "  label: function(text, index) {",
            "    return {",
            "      fill: colorMap[text],",
            "      fontSize: 14",
            "    };",
            "  }",
            "});",
            "chart.axis('sold', false);",
            "chart.interval().position('genre*sold').color('genre').style({",
            "  fillOpacity: 0.4,",
            "  lineWidth: 2",
            "});",
            "data.forEach(function(obj) {",
            "  // 如果使用 PC 端的 G2，直接使用 .label('sold', {label: {fontSize: 14}}) 方法",
            " chart.guide().text([obj.genre, obj.sold + 10], obj.sold, {",
            "   fill: colorMap[obj.genre],",
            "   fontSize: 14,",
            "   textAlign: 'center'",
            "  });",
            "});",
            "// Step 4: 渲染图表",
            "chart.render();",
            "var mount = document.getElementById('mountNode');",
            "var img = document.createElement('IMG');",
            "mount.style['text-align'] = 'center';",
            "img.setAttribute('src', 'https://zos.alipayobjects.com/rmsportal/pEKpEUWQFAbGczz.jpg');",
            "img.setAttribute('width', '300px');",
            "img.style.margin = \"0 auto\"",
            "mount.appendChild(img);"
        ],
        "description": "G2-Mobile 定制柱状图样式"
    },
    "【G2 2.2.x】饼图支持多选": {
        "prefix": "【G2 2.2.x】饼图支持多选",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from '@ali/g2;",
            "var data = [{value:335,type:'直达',name:'直达'},{value:310,type:'营销广告',name:'邮件营销'},{value:234,type:'营销广告',name:'联盟广告'},{value:135,type:'营销广告',name:'视频广告'},{value:1048,type:'搜索引擎',name:'百度'},{value:251,type:'搜索引擎',name:'谷歌'},{value:147,type:'搜索引擎',name:'必应'},{value:102,type:'搜索引擎',name:'其他'  }];",
            "var Stat = G2.Stat;",
            "var chart = new G2.Chart({",
            "  id: 'mountNode',",
            "  forceFit: true,",
            "  height: 500,",
            "  plotCfg: {",
            "    margin: [60, 80, 60, 80]",
            "  }",
            "});",
            "chart.source(data);",
            "chart.legend(false);",
            "chart.coord('theta', {",
            "  radius: 0.5 // 设置饼图的大小",
            "});",
            "chart.intervalStack()",
            "  .position(Stat.summary.percent('value'))",
            "  .color('type', ['#B22425', '#243543', '#518F98'])",
            "  .label('type', {",
            "    offset: -20,",
            "    label: {",
            "      fontSize: 14",
            "    }",
            "  });",
            "var view = chart.createView();",
            "view.source(data);",
            "view.coord('theta', {",
            "  inner: 0.75",
            "});",
            "view.intervalStack()",
            "  .position(Stat.summary.percent('value'))",
            "  .color('name', ['#B22425', '#C86D51', '#81BB9D', '#63906E', '#BD7212', '#AE9088', '#5B5D61', '#43525D'])",
            "  .label('name*type').selected({",
            "    selectedMode: 'multiple'",
            "  });",
            "chart.render();",
            "chart.on('plotclick', function(ev) {",
            "  var chartGeom = chart.get('geoms')[0];",
            "  var viewGeom = view.get('geoms')[0];",
            "  viewGeom.clearSelected();",
            "  var selected = chartGeom.getSelected();",
            "  if (selected) {",
            "    var data = selected['_origin'];",
            "    var selectedType = data.type;",
            "    var items = viewGeom.getData();",
            "    for (var i = 0; i < items.length; i++) {",
            "      var item = items[i];",
            "      if (item['_origin'].type === selectedType) {",
            "        viewGeom.setSelected(item);",
            "      }",
            "    }",
            "  }",
            "});"
        ],
        "description": "【G2 2.2.x】饼图支持多选"
    },
    "凤蝶业务数据-发布活动数量": {
        "prefix": "凤蝶业务数据-发布活动数量",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from '@ali/g2';",
            "import Moment from 'moment';",
            "// G2 对数据源格式的要求，仅仅是 JSON 数组，数组的每个元素是一个标准 JSON 对象。",
            "var data = [",
            "  {time: '2016-06', value: 200, name: '新建未发布活动数量'},",
            "  {time: '2016-07', value: 220, name: '新建未发布活动数量'},",
            "  {time: '2016-08', value: 250, name: '新建未发布活动数量'},",
            "  {time: '2016-06', value: 250, name: '首次发布活动数量'},",
            "  {time: '2016-07', value: 260, name: '首次发布活动数量'},",
            "  {time: '2016-08', value: 220, name: '首次发布活动数量'},",
            "  {time: '2016-06', value: 100, name: '重新发布活动数量'},",
            "  {time: '2016-07', value: 60, name: '重新发布活动数量'},",
            "  {time: '2016-08', value: 120, name: '重新发布活动数量'},",
            "];",
            "// Step 1: 创建 Chart 对象",
            "var chart = new G2.Chart({",
            "  id: 'mountNode',  // 指定图表容器 ID",
            "  height : 300,     // 指定图表高度",
            "  forceFit: true,",
            "  plotCfg: {",
            "    margin:[20, 160, 60, 80]",
            "  }",
            "});",
            "// Step 2: 载入数据源",
            "chart.source(data, {",
            "  time: {",
            "    mask: 'yyyy-mm',",
            "    type: 'cat',",
            "    ticks: ['2016-06', '2016-07', '2016-08'],",
            "    formatter: function(val){",
            "      return Moment(val).format('YYYY年M月');",
            "    }",
            "  },",
            "  value: {",
            "    alias: '活动数量',",
            "    min: 0",
            "  }",
            "});",
            "chart.axis('time', {",
            "  title: null",
            "});",
            "chart.legend('name', {",
            "  title: null",
            "});",
            "// Step 3：创建图形语法，绘制柱状图，由 genre 和 sold 两个属性决定图形位置，genre 映射至 x 轴，sold 映射至 y 轴",
            "chart.intervalStack().position('time*value').color('name').shape('spline');",
            "// Step 4: 渲染图表",
            "chart.render();"
        ],
        "description": "凤蝶业务数据-发布活动数量"
    },
    "G2 环形图": {
        "prefix": "G2 环形图",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "",
            "const data = [",
            "    { year: 2007, area: '亚太地区', profit: 7860 * 0.189 },",
            "    { year: 2007, area: '非洲及中东', profit: 7860 * 0.042 },",
            "    { year: 2007, area: '拉丁美洲', profit: 7860 * 0.025 },",
            "    { year: 2007, area: '中欧和东欧', profit: 7860 * 0.018 },",
            "    { year: 2007, area: '西欧', profit: 7860 * 0.462 },",
            "    { year: 2007, area: '北美', profit: 7860 * 0.265 },",
            "    { year: 2011, area: '亚太地区', profit: 7620 * 0.539 },",
            "    { year: 2011, area: '非洲及中东', profit: 7620 * 0.065 },",
            "    { year: 2011, area: '拉丁美洲', profit: 7620 * 0.065 },",
            "    { year: 2011, area: '中欧和东欧', profit: 7620 * 0.034 },",
            "    { year: 2011, area: '西欧', profit: 7620 * 0.063 },",
            "    { year: 2011, area: '北美', profit: 7620 * 0.234 },",
            "];",
            "function formatter(text, item) {",
            "  const point = item.point; // 每个弧度对应的点",
            "  let percent = point['..percent'];",
            "  percent = (percent * 100).toFixed(2) + '%';",
            "  return percent;",
            "}",
            "import G2 from 'g2';",
            "const Stat = G2.Stat;",
            "const chart = new G2.Chart({",
            "  id: 'mountNode',",
            "  width: 1000,",
            "  height: 450,",
            "  plotCfg: {",
            "    margin: [80, 120],",
            "  },",
            "});",
            "// 以 year 为维度划分分面",
            "chart.facet(['year']);",
            "chart.source(data);",
            "chart.legend('bottom');",
            "chart.coord('theta', {",
            "  radius: 0.7,",
            "  inner: 0.6,",
            "});",
            "chart.tooltip({",
            "  title: null,",
            "});",
            "chart.intervalStack().position(Stat.summary.percent('profit')).color('area').label('year', {",
            "  custom: true,",
            "  renderer: (text, item) => {",
            "    const point = item.point;",
            "    const memo = point.profit;",
            "    return '<div>' + memo + '</div>';",
            "  },",
            "  labelLine: false,",
            "  offset: 5,",
            "}",
            ");",
            "chart.render();",
            ""
        ],
        "description": "G2 环形图"
    },
    "G2 - 设置鼠标手势": {
        "prefix": "G2 - 设置鼠标手势",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from 'g2';",
            "import Source from '@ali/datavis-source@0.0.11/dist/index';",
            "var data = Source.SampleData.D1;",
            "var chart = new G2.Chart({",
            "  id: 'mountNode',",
            "  forceFit: true,",
            "  height : 300",
            "});",
            "chart.source(data, {",
            "  weight: {",
            "    alias: '体重（kg）'",
            "  },",
            "  height: {",
            "    alias: '身高（cm）'",
            "  }",
            "});",
            "chart.tooltip({",
            "  title: null",
            "});",
            "chart.filter('gender', ['female']);",
            "chart.point().position('height*weight')",
            "    .color('gender', ['rgba(223, 83, 83, 0.7)', 'rgba(119, 152, 191, 0.7)'])",
            "    .shape('gender', ['circle', 'diamond'])",
            "    .size(4)",
            "    .tooltip('gender*height*weight')",
            "    .style({",
            "      cursor: 'pointer' // 设置鼠标手势",
            "    });",
            "chart.render();",
            "      "
        ],
        "description": "G2 - 设置鼠标手势"
    },
    "相关系数矩阵，tooltip 信息格式化": {
        "prefix": "相关系数矩阵，tooltip 信息格式化",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from 'g2';",
            "const records = [",
            "  ['income', '1.0', '-0.08365221311388209', '0.1946224341054938', '0.17349083292921497', '0.0010490782057015029', '0.12086865240260256', '0.1282527700193935', '0.20938754384521155', '0.23590297138230557', '0.08298465945558786', '0.16970880163601149', '0.18544022562818627', '0.20161263744908192', '0.14047718289441954', '0.21991912117704107', '0.05716087049929801', '0.18144354551840933', '0.7804810797427356', '0.023764570042787907', '0.24291234020792954'],",
            "  ['retire', '-0.08365221311388209', '1.0', '0.2718743394679793', '0.08617451801201928', '-0.09308169567328015', '0.12445213578764143', '-0.027320486886822582', '0.2836484777568798', '0.14591598736225891', '-0.051892287889936356', '0.18253841955759073', '0.020348788477041774', '0.19652653386985394', '0.1175769388826223', '0.07299792485441682', '0.08326017597338865', '0.0756274012688323', '-0.2124018676335427', '0.005594836023906273', '0.17113888612351832'],",
            "  ['longmon', '0.1946224341054938', '0.2718743394679793', '1.0', '0.20538281883095336', '-0.04768192517272769', '0.3949752642026423', '0.06389648068909404', '0.9832179795788684', '0.4160367046874029', '0.21025933907389177', '0.5924345605175153', '0.2347298825110922', '0.873879532553953', '0.4046044400522716', '0.2907433736308382', '0.22376124606727935', '0.35962943704286526', '0.25871151614246973', '-0.0015815235606090035', '0.7136709409221286'],",
            "  ['tollmon', '0.17349083292921497', '0.08617451801201928', '0.20538281883095336', '1.0', '0.05373473797742984', '0.32855378926907963', '0.44597446006504865', '0.21155244908121634', '0.8440629538457326', '0.1149825362245115', '0.2584352210216319', '0.43782580594725795', '0.221652702360392', '0.9199014537673287', '0.5774170079633945', '0.1556237879939236', '0.43861882161220395', '0.20911046708008948', '0.029747134001204788', '0.22650794334765192'],",
            "  ['equipmon', '0.0010490782057015029', '-0.09308169567328015', '-0.04768192517272769', '0.05373473797742984', '1.0', '0.037117929356518614', '0.5611299628462747', '-0.04571026390414245', '0.01803723045378357', '0.8092889043622248', '-0.0023563745425574613', '0.43648659590441724', '-0.06180273497350234', '-0.05905556954755332', '0.9841117667703032', '0.03115819308988032', '0.3114828032418403', '0.04289171642950731', '-0.015332876606566974', '-0.06038410594946189'],",
            "            ['cardmon', '0.12086865240260256', '0.12445213578764143', '0.3949752642026423', '0.32855378926907963', '0.037117929356518614', '1.0', '0.254270713666062', '0.4108703487385724', '0.34009835912954767', '0.18107399139239277', '0.8685567565383858', '0.2557061365670224', '0.4197680359444303', '0.3655573193269497', '0.4482988171579244', '0.9203680804250065', '0.29592883141418747', '0.19396499021313426', '-0.0032598273694919833', '0.4399656475221205'],",
            "            ['wiremon', '0.1282527700193935', '-0.027320486886822582', '0.06389648068909404', '0.44597446006504865', '0.5611299628462747', '0.254270713666062', '1.0', '0.06878864010878918', '0.3917138798648961', '0.5284047014989601', '0.15596806396319157', '0.8752361334687652', '0.08868294136338778', '0.28925244315390986', '0.8044348333273188', '0.1287882759868861', '0.9679548416016952', '0.17846803025081318', '0.007596690803403076', '0.10207236199834695'],",
            "            ['longten', '0.20938754384521155', '0.2836484777568798', '0.9832179795788684', '0.21155244908121634', '-0.04571026390414245', '0.4108703487385724', '0.06878864010878918', '1.0', '0.43859316767375645', '0.21903497736345898', '0.6290421401093245', '0.2509968871451265', '0.8263299243889626', '0.4219821405079634', '0.29056885265152205', '0.24220024609954913', '0.37762405401894533', '0.27087878478097127', '0.007031694092772801', '0.7473031818549757'],",
            "            ['tollten', '0.23590297138230557', '0.14591598736225891', '0.4160367046874029', '0.8440629538457326', '0.01803723045378357', '0.34009835912954767', '0.3917138798648961', '0.43859316767375645', '1.0', '0.18500527757114907', '0.42074498817705164', '0.5244694537301026', '0.4412451687637435', '0.7796602420774871', '0.527690380681772', '0.19580806068249815', '0.5022733650284087', '0.28287968345439923', '0.01582512276325982', '0.48720542999588223'],",
            "            ['equipten', '0.08298465945558786', '-0.051892287889936356', '0.21025933907389177', '0.1149825362245115', '0.8092889043622248', '0.18107399139239277', '0.5284047014989601', '0.21903497736345898', '0.18500527757114907', '1.0', '0.2344663399575576', '0.6027587868647408', '0.25083513933170704', '0.13896503185834816', '0.6443991887667789', '0.09223804308669174', '0.4481040776550066', '0.13941569109435803', '-0.007275883292978679', '0.3071252869317211'],",
            "            ['cardten', '0.16970880163601149', '0.18253841955759073', '0.5924345605175153', '0.2584352210216319', '-0.0023563745425574613', '0.8685567565383858', '0.15596806396319157', '0.6290421401093245', '0.42074498817705164', '0.2344663399575576', '1.0', '0.2840706778566432', '0.6111944724699703', '0.4831130396413713', '0.3680458284260901', '0.7217864962867832', '0.42458831429228777', '0.24571060947808054', '0.0025793301363755553', '0.6767324744345765'],",
            "            ['wireten', '0.18544022562818627', '0.020348788477041774', '0.2347298825110922', '0.43782580594725795', '0.43648659590441724', '0.2557061365670224', '0.8752361334687652', '0.2509968871451265', '0.5244694537301026', '0.6027587868647408', '0.2840706778566432', '1.0', '0.2749590035276001', '0.41505474730212083', '0.6818577923357501', '0.13559851700711886', '0.7535471211719724', '0.21916482987651703', '0.02097937686836687', '0.3277945846961357'],",
            "            ['loglong', '0.20161263744908192', '0.19652653386985394', '0.873879532553953', '0.221652702360392', '-0.06180273497350234', '0.4197680359444303', '0.08868294136338778', '0.8263299243889626', '0.4412451687637435', '0.25083513933170704', '0.6111944724699703', '0.2749590035276001', '1.0', '0.45879525724118336', '0.38398736817406076', '0.22671012592180861', '0.4027641937181758', '0.28773249837566406', '-0.00878280409159359', '0.840424516028087'],",
            "            ['logtoll', '0.14047718289441954', '0.1175769388826223', '0.4046044400522716', '0.9199014537673287', '-0.05905556954755332', '0.3655573193269497', '0.28925244315390986', '0.4219821405079634', '0.7796602420774871', '0.13896503185834816', '0.4831130396413713', '0.41505474730212083', '0.45879525724118336', '1.0', '0.5200967496660267', '0.307408992525196', '0.4511755297145966', '0.2043969978449009', '-0.024541997821191378', '0.5271161599977151'],",
            "            ['logequi', '0.21991912117704107', '0.07299792485441682', '0.2907433736308382', '0.5774170079633945', '0.9841117667703032', '0.4482988171579244', '0.8044348333273188', '0.29056885265152205', '0.527690380681772', '0.6443991887667789', '0.3680458284260901', '0.6818577923357501', '0.38398736817406076', '0.5200967496660267', '1.0', '0.2287460694054722', '0.7642387432815553', '0.2434898791919751', '-0.002413596372899782', '0.4090737255663137'],",
            "            ['logcard', '0.05716087049929801', '0.08326017597338865', '0.22376124606727935', '0.1556237879939236', '0.03115819308988032', '0.9203680804250065', '0.1287882759868861', '0.24220024609954913', '0.19580806068249815', '0.09223804308669174', '0.7217864962867832', '0.13559851700711886', '0.22671012592180861', '0.307408992525196', '0.2287460694054722', '1.0', '0.21204500866313591', '0.0734871754374099', '-0.03560399187202913', '0.22437760614235394'],",
            "            ['logwire', '0.18144354551840933', '0.0756274012688323', '0.35962943704286526', '0.43861882161220395', '0.3114828032418403', '0.29592883141418747', '0.9679548416016952', '0.37762405401894533', '0.5022733650284087', '0.4481040776550066', '0.42458831429228777', '0.7535471211719724', '0.4027641937181758', '0.4511755297145966', '0.7642387432815553', '0.21204500866313591', '1.0', '0.23468190259507143', '0.047230206326831746', '0.460905916154101'],",
            "            ['lninc', '0.7804810797427356', '-0.2124018676335427', '0.25871151614246973', '0.20911046708008948', '0.04289171642950731', '0.19396499021313426', '0.17846803025081318', '0.27087878478097127', '0.28287968345439923', '0.13941569109435803', '0.24571060947808054', '0.21916482987651703', '0.28773249837566406', '0.2043969978449009', '0.2434898791919751', '0.0734871754374099', '0.23468190259507143', '1.0', '-0.005528142573948232', '0.3331564814541439'],",
            "            ['region', '0.023764570042787907', '0.005594836023906273', '-0.0015815235606090035', '0.029747134001204788', '-0.015332876606566974', '-0.0032598273694919833', '0.007596690803403076', '0.007031694092772801', '0.01582512276325982', '-0.007275883292978679', '0.0025793301363755553', '0.02097937686836687', '-0.00878280409159359', '-0.024541997821191378', '-0.002413596372899782', '-0.03560399187202913', '0.047230206326831746', '-0.005528142573948232', '1.0', '0.016387778414995054'],",
            "            ['tenure', '0.24291234020792954', '0.17113888612351832', '0.7136709409221286', '0.22650794334765192', '-0.06038410594946189', '0.4399656475221205', '0.10207236199834695', '0.7473031818549757', '0.48720542999588223', '0.3071252869317211', '0.6767324744345765', '0.3277945846961357', '0.840424516028087', '0.5271161599977151', '0.4090737255663137', '0.22437760614235394', '0.460905916154101', '0.3331564814541439', '0.016387778414995054', '1.0'],",
            "];",
            "const sources = [];",
            "const columns = [];",
            "records.forEach((values, x) => {",
            "  values.forEach((val, y) => {",
            "    if (y) {",
            "      sources.push({",
            "        x,",
            "        y: y - 1,",
            "        value: parseFloat(parseFloat(val).toFixed(2)),",
            "      });",
            "    } else {",
            "      columns.push(val);",
            "    }",
            "  });",
            "});",
            "const chart = new G2.Chart({",
            "  id: 'mountNode',",
            "  width: 800,",
            "  height: 600,     // 指定图表高度",
            "  forceFit: true,",
            "});",
            "chart.source(sources, {",
            "  x: {",
            "    type: 'cat',",
            "    values: columns.slice(0),",
            "  },",
            "  y: {",
            "    type: 'cat',",
            "    values: columns.slice(0),",
            "  },",
            "  value: {",
            "    nice: false,",
            "    min: -1,",
            "    max: 1,",
            "  },",
            "});",
            "chart.axis('x', {",
            "  title: null,",
            "});",
            "chart.axis('y', {",
            "  title: null,",
            "});",
            "chart.tooltip({",
            "  title: null",
            "});",
            "chart.polygon()",
            "            .position('x*y')",
            "            .color('value', '#EECB5F-#ffffff-#61a5e8')",
            "            //.label('value', {",
            "            //  offset: -2,",
            "            //  label: {",
            "            //    fill: '#444',",
            "            //    fontWeight: 'bold',",
            "            //  },",
            "            // });",
            "chart.render();",
            "chart.on('tooltipchange',function(ev){",
            "    var item = ev.items[0]; // 获取tooltip要显示的内容",
            "    var originObj = item.point._origin;",
            "    item.name = originObj.x + '-' + originObj.y;",
            "  });",
            ""
        ],
        "description": "相关系数矩阵，tooltip 信息格式化"
    },
    "加阴影": {
        "prefix": "加阴影",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from 'g2';",
            "// G2 对数据源格式的要求，仅仅是 JSON 数组，数组的每个元素是一个标准 JSON 对象。",
            "var data = [",
            "  {genre: 'Sports', sold: 275},",
            "  {genre: 'Strategy', sold: 115},",
            "  {genre: 'Action', sold: 120},",
            "  {genre: 'Shooter', sold: 350},",
            "  {genre: 'Other', sold: 150},",
            "];",
            "// Step 1: 创建 Chart 对象",
            "var chart = new G2.Chart({",
            "  id: 'mountNode',  // 指定图表容器 ID",
            "  height : 300,     // 指定图表高度",
            "  forceFit: true,",
            "});",
            "// Step 2: 载入数据源",
            "chart.source(data, {",
            "  genre: {",
            "    alias: '游戏种类' // 列定义，定义该属性显示的别名",
            "  },",
            "  sold: {",
            "    alias: '销售量'",
            "  }",
            "});",
            "// Step 3：创建图形语法，绘制柱状图，由 genre 和 sold 两个属性决定图形位置，genre 映射至 x 轴，sold 映射至 y 轴",
            "chart.interval()",
            "     .position('genre*sold')",
            "     .color('genre')",
            "     .style({",
            "       shadowBlur: 20,",
            "       shadowColor: 'black'",
            "     });",
            "// Step 4: 渲染图表",
            "chart.render();",
            "var mount = document.getElementById('mountNode');",
            "var img = document.createElement('IMG');",
            "mount.style['text-align'] = 'center';",
            "img.setAttribute('src', 'https://zos.alipayobjects.com/rmsportal/pEKpEUWQFAbGczz.jpg');",
            "img.setAttribute('width', '300px');",
            "img.style.margin = \"0 auto\"",
            "mount.appendChild(img);"
        ],
        "description": "加阴影"
    },
    "g2-双Y轴（多 view）": {
        "prefix": "g2-双Y轴（多 view）",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from 'g2';",
            "import $ from 'jquery'",
            "var result= {",
            "    \"0\": {",
            "        \"config\": {",
            "            \"gmtCreate\": 1442991600000,",
            "            \"gmtModified\": 1442991600000,",
            "            \"id\": 3532440,",
            "            \"kpiCategoryId\": \"REAL-TIME\",",
            "            \"kpiContactPerson\": \"chingman.fcm\",",
            "            \"kpiEntity\": \"蚂蚁金服国际\",",
            "            \"kpiEntityId\": \"overall000\",",
            "            \"kpiPropertyName\": \"ALL\",",
            "            \"kpiSpecId\": \"INTL_RT_PAY_TOTAL_HOUR_AMT\",",
            "            \"kpiSpecName\": \"国际支付每小时总金额\",",
            "            \"kpiStatsWindow\": \"Hour\",",
            "            \"kpiSubsetName\": \"ALL\",",
            "            \"kpiType\": \"METRIC_AMOUNT\"",
            "        },",
            "        \"series\": [",
            "            {",
            "                \"data\": {",
            "                    \"2016-10-27 00:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 15578764,",
            "                        \"value\": 15578764",
            "                    },",
            "                    \"2016-10-27 01:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 15796393,",
            "                        \"value\": 15796393",
            "                    },",
            "                    \"2016-10-27 02:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 13758051,",
            "                        \"value\": 13758051",
            "                    },",
            "                    \"2016-10-27 03:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 13585254,",
            "                        \"value\": 13585254",
            "                    },",
            "                    \"2016-10-27 04:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 14692809,",
            "                        \"value\": 14692809",
            "                    },",
            "                    \"2016-10-27 05:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 14345882,",
            "                        \"value\": 14345882",
            "                    },",
            "                    \"2016-10-27 06:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 14605168,",
            "                        \"value\": 14605168",
            "                    },",
            "                    \"2016-10-27 07:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 14793173,",
            "                        \"value\": 14793173",
            "                    },",
            "                    \"2016-10-27 08:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 15095548,",
            "                        \"value\": 15095548",
            "                    },",
            "                    \"2016-10-27 09:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 14997352,",
            "                        \"value\": 14997352",
            "                    },",
            "                    \"2016-10-27 10:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 14792154,",
            "                        \"value\": 14792154",
            "                    },",
            "                    \"2016-10-27 11:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 15503758,",
            "                        \"value\": 15503758",
            "                    },",
            "                    \"2016-10-27 12:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 15252464,",
            "                        \"value\": 15252464",
            "                    },",
            "                    \"2016-10-27 13:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 13816157,",
            "                        \"value\": 13816157",
            "                    },",
            "                    \"2016-10-27 14:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 10665971,",
            "                        \"value\": 10665971",
            "                    },",
            "                    \"2016-10-27 15:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 7794402,",
            "                        \"value\": 7794402",
            "                    },",
            "                    \"2016-10-27 16:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 6565822,",
            "                        \"value\": 6565822",
            "                    },",
            "                    \"2016-10-27 17:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 6146959,",
            "                        \"value\": 6146959",
            "                    },",
            "                    \"2016-10-27 18:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 6439879,",
            "                        \"value\": 6439879",
            "                    },",
            "                    \"2016-10-27 19:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 7763096,",
            "                        \"value\": 7763096",
            "                    },",
            "                    \"2016-10-27 20:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 7609151,",
            "                        \"value\": 7609151",
            "                    },",
            "                    \"2016-10-27 21:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 7322824,",
            "                        \"value\": 7322824",
            "                    },",
            "                    \"2016-10-27 22:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 8195190,",
            "                        \"value\": 8195190",
            "                    },",
            "                    \"2016-10-27 23:00:00\": {",
            "                        \"count\": 0,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 10045213,",
            "                        \"value\": 10045213",
            "                    }",
            "                },",
            "                \"propertyValue\": \"ALL\"",
            "            }",
            "        ]",
            "    },",
            "    \"1\": {",
            "        \"config\": {",
            "            \"gmtCreate\": 1442991600000,",
            "            \"gmtModified\": 1442991600000,",
            "            \"id\": 3532441,",
            "            \"kpiCategoryId\": \"REAL-TIME\",",
            "            \"kpiContactPerson\": \"chingman.fcm\",",
            "            \"kpiEntity\": \"蚂蚁金服国际\",",
            "            \"kpiEntityId\": \"overall000\",",
            "            \"kpiPropertyName\": \"ALL\",",
            "            \"kpiSpecId\": \"INTL_RT_PAY_TOTAL_HOUR_CNT\",",
            "            \"kpiSpecName\": \"国际支付每小时总笔数\",",
            "            \"kpiStatsWindow\": \"Hour\",",
            "            \"kpiSubsetName\": \"ALL\",",
            "            \"kpiType\": \"METRIC_COUNT\"",
            "        },",
            "        \"series\": [",
            "            {",
            "                \"data\": {",
            "                    \"2016-10-27 00:00:00\": {",
            "                        \"count\": 97529,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 97529",
            "                    },",
            "                    \"2016-10-27 01:00:00\": {",
            "                        \"count\": 104185,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 104185",
            "                    },",
            "                    \"2016-10-27 02:00:00\": {",
            "                        \"count\": 87045,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 87045",
            "                    },",
            "                    \"2016-10-27 03:00:00\": {",
            "                        \"count\": 89530,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 89530",
            "                    },",
            "                    \"2016-10-27 04:00:00\": {",
            "                        \"count\": 96291,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 96291",
            "                    },",
            "                    \"2016-10-27 05:00:00\": {",
            "                        \"count\": 95913,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 95913",
            "                    },",
            "                    \"2016-10-27 06:00:00\": {",
            "                        \"count\": 98290,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 98290",
            "                    },",
            "                    \"2016-10-27 07:00:00\": {",
            "                        \"count\": 97681,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 97681",
            "                    },",
            "                    \"2016-10-27 08:00:00\": {",
            "                        \"count\": 99095,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 99095",
            "                    },",
            "                    \"2016-10-27 09:00:00\": {",
            "                        \"count\": 108506,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 108506",
            "                    },",
            "                    \"2016-10-27 10:00:00\": {",
            "                        \"count\": 115643,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 115643",
            "                    },",
            "                    \"2016-10-27 11:00:00\": {",
            "                        \"count\": 124165,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 124165",
            "                    },",
            "                    \"2016-10-27 12:00:00\": {",
            "                        \"count\": 122358,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 122358",
            "                    },",
            "                    \"2016-10-27 13:00:00\": {",
            "                        \"count\": 106319,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 106319",
            "                    },",
            "                    \"2016-10-27 14:00:00\": {",
            "                        \"count\": 79497,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 79497",
            "                    },",
            "                    \"2016-10-27 15:00:00\": {",
            "                        \"count\": 53330,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 53330",
            "                    },",
            "                    \"2016-10-27 16:00:00\": {",
            "                        \"count\": 37642,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 37642",
            "                    },",
            "                    \"2016-10-27 17:00:00\": {",
            "                        \"count\": 30958,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 30958",
            "                    },",
            "                    \"2016-10-27 18:00:00\": {",
            "                        \"count\": 29943,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 29943",
            "                    },",
            "                    \"2016-10-27 19:00:00\": {",
            "                        \"count\": 30250,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 30250",
            "                    },",
            "                    \"2016-10-27 20:00:00\": {",
            "                        \"count\": 33428,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 33428",
            "                    },",
            "                    \"2016-10-27 21:00:00\": {",
            "                        \"count\": 36566,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 36566",
            "                    },",
            "                    \"2016-10-27 22:00:00\": {",
            "                        \"count\": 47043,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 47043",
            "                    },",
            "                    \"2016-10-27 23:00:00\": {",
            "                        \"count\": 59235,",
            "                        \"rank\": 0,",
            "                        \"rate\": 0,",
            "                        \"sum\": 0,",
            "                        \"value\": 59235",
            "                    }",
            "                },",
            "                \"propertyValue\": \"ALL\"",
            "            }",
            "        ]",
            "    }",
            "};",
            "  var D11_BLUE = '#00A0E9';",
            "  var D11_RED = '#F44336';",
            "  var data = {",
            "    start_date: '2016-10-27 00:00:00',",
            "    end_date: '2016-10-27 23:59:59',",
            "    sort: {},",
            "    request: [",
            "      {",
            "        index: 0,",
            "        kpi_spec_id: 'INTL_RT_PAY_TOTAL_HOUR_AMT',",
            "        entity_id: 'overall000',",
            "        kpi_property_value: 'ALL',",
            "        all_fields: true",
            "      }, {",
            "        index: 1,",
            "        kpi_spec_id: 'INTL_RT_PAY_TOTAL_HOUR_CNT',",
            "        entity_id: 'overall000',",
            "        kpi_property_value: 'ALL',",
            "        all_fields: true",
            "      }",
            "    ]",
            "  };",
            "      var result1 = result[0];",
            "      var result2 = result[1];",
            "      var data1 = result1.series[0].data;",
            "      var data2 = result2.series[0].data;",
            "      var res = [];",
            "      for (var i in data1) {",
            "        res.push({",
            "          date: i,",
            "          value1: data1[i].value,",
            "          value2: data2[i].value",
            "        });",
            "      }",
            "      var data = res;",
            "      console.log(data);",
            "      var def = {",
            "        date: {",
            "          type: 'timeCat',",
            "          mask: 'HH',",
            "          //tickInterval: 1 * 3600 * 1000",
            "          tickCount: 24",
            "        },",
            "        value1: {",
            "          alias: '红色的'",
            "        },",
            "        value2: {",
            "          alias: '蓝色的'",
            "        }",
            "      };",
            "      var chart = new G2.Chart({",
            "        id: 'mountNode',",
            "        width: 800,",
            "        height: 250,",
            "        plotCfg: {",
            "          margin: [60, 80]",
            "        }",
            "      });",
            "      ",
            "      var view1 = chart.createView({",
            "        start: {",
            "          x: 0.01,",
            "          y: 0",
            "        },",
            "        end: {",
            "          x: 0.91,",
            "          y: 1",
            "        }",
            "      });",
            "      view1.source(data, def);",
            "      view1.axis('date', {",
            "        labels: {",
            "          label: {",
            "            fill: '#fff'",
            "          }",
            "        },",
            "        title: null",
            "      });",
            "      view1.axis('value1', {",
            "        line: {",
            "          stroke: D11_RED,",
            "          lineDash: [2, 2],",
            "          lineWidth: 2",
            "        },",
            "        tickLine: null,",
            "        grid: null,",
            "        labels: {",
            "          label: {",
            "            stroke: D11_RED",
            "          }",
            "        },",
            "        title:  null",
            "      });",
            "      view1.line().position('date*value1').color(D11_RED).shape('smooth');",
            "      view1.interval().position('date*value1').color(D11_RED).size(7);",
            "      var view2 = chart.createView({",
            "        index:1,",
            "        start: {",
            "          x: 0.023,",
            "          y: 0",
            "        },",
            "        end: {",
            "          x: 0.923,",
            "          y: 1",
            "        }",
            "      });",
            "      view2.source(data, def);",
            "      view2.axis('value2', {",
            "        formatter: function(val) {",
            "          return '$' + val;",
            "        },",
            "        position: 'right',",
            "        line: {",
            "          stroke: D11_BLUE,",
            "          lineDash: [2, 2],",
            "          lineWidth: 2",
            "        },",
            "        tickLine: null,",
            "        grid: null,",
            "        labels: {",
            "          label: {",
            "            stroke: D11_BLUE",
            "          }",
            "        },",
            "        title:  null",
            "      });",
            "      view2.axis('date', false);",
            "      view2.line().position('date*value2').color(D11_BLUE).shape('smooth');",
            "      view2.interval().position('date*value2').color(D11_BLUE).size(7);",
            "      chart.legend({",
            "        position: 'top',",
            "        word: {",
            "          fill: '#fff'",
            "        }",
            "      });",
            "      chart.render();",
            ""
        ],
        "description": "g2-双Y轴（多 view）"
    },
    "层叠柱状图 工作不正常": {
        "prefix": "层叠柱状图 工作不正常",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from '@ali/g2';",
            "var data = [",
            "    {\"BD\": \"\", \"\": 1, \"其它\": 1}, ",
            "    {\"BD\": \"厉飚\", \"非Amap Auto系项目\": 4}, ",
            "    {\"BD\": \"李天美\", \"\": 6, \"Auto-Android\": 4, \"Auto-CPP\": 1, \"非Amap Auto系项目\": 1}, ",
            "    {\"BD\": \"李瑾\", \"\": 11, \"非Amap Auto系项目\": 1}, ",
            "    {\"BD\": \"可雪铭\", \"\": 10, \"Auto-CPP\": 1, \"非Amap Auto系项目\": 1, \"Auto-Android\": 1, \"一体化项目\": 1}, ",
            "    {\"BD\": \"范静芬\", \"\": 5, \"吉利专项\": 20}, ",
            "    {\"BD\": \"蔡宁\", \"T服务项目\": 5}, ",
            "    {\"BD\": \"杨传复\", \"\": 1, \"Auto-Android\": 1}, ",
            "    {\"BD\": \"郑林\", \"Auto-Android\": 2, \"Auto-CPP\": 1}, ",
            "    {\"BD\": \"李立文\", \"非Amap Auto系项目\": 2}, ",
            "    {\"BD\": \"高一辰\", \"\": 13, \"Auto-Android\": 2}, ",
            "    {\"BD\": \"徐驰/王佳乐\", \"T服务项目\": 3}, ",
            "    {\"BD\": \"张裕\", \"\": 3}, ",
            "    {\"BD\": \"张翌强\", \"Auto-CPP\": 1}, ",
            "    {\"BD\": \"徐驰\", \"非Amap Auto系项目\": 3}, ",
            "    {\"BD\": \"葛昕\", \"\": 18, \"Auto-Android\": 7}, ",
            "    {\"BD\": \"陆薇\", \"\": 22, \"Auto-Android\": 1, \"Auto-CPP\": 4, \"非Amap Auto系项目\": 1}, ",
            "    {\"BD\": \"李英俊\", \"\": 13, \"Auto-CPP\": 5, \"非Amap Auto系项目\": 2, \"Auto-Android\": 2, \"一体化项目\": 5}, ",
            "    {\"BD\": \"杨建军\", \"\": 2}, ",
            "    {\"BD\": \"无\", \"\": 2}, ",
            "    {\"BD\": \"王薇\", \"\": 6}, ",
            "    {\"BD\": \"穆文刚\", \"Auto-Android\": 1, \"Auto-CPP\": 1}, ",
            "    {\"BD\": \"王锦姿\", \"\": 2}, ",
            "    {\"BD\": \"王志鹏\", \"T服务项目\": 1, \"非Amap Auto系项目\": 12}, ",
            "    {\"BD\": \"葛欣\", \"Auto-Android\": 1}",
            "];",
            "var Stat = G2.Stat;",
            "var Frame = G2.Frame;",
            "var frame = new Frame(data, {",
            "  names: [\"Auto-Android\", \"Auto-CPP\", \"非Amap Auto系项目\", \"吉利专项\", \"T服务项目\", \"一体化项目\", \"其它\", \"\",'BD']",
            "});",
            "frame = Frame.combinColumns(frame, [\"Auto-Android\", \"Auto-CPP\", \"非Amap Auto系项目\", \"吉利专项\", \"T服务项目\", \"一体化项目\", \"其它\", \"\"], '数量', '分类','BD');",
            "console.log(frame.s())",
            "var chart = new G2.Chart({",
            "  id: 'mountNode',",
            "  forceFit: true,",
            "  height: 450,",
            "  plotCfg: {",
            "    margin: [30, 80, 90, 40],",
            "    background: { ",
            "      stroke: '#ccc', // 边颜色",
            "      lineWidth: 1, // 边框粗细",
            "    } // 绘图区域背景设置",
            "  }",
            "});",
            "chart.source(frame);",
            "chart.legend({",
            "  position: 'bottom'",
            "});",
            "chart.axis('BD', {",
            "  title: null",
            "});",
            "chart.axis('数量', {",
            "  titleOffset: 75,",
            "  formatter: function(val) {",
            "    return val;",
            "  },",
            "  position: 'right'",
            "});",
            "chart.intervalStack().position('BD*数量').color('分类', ['#FF0000', '#00FF00', '#0000FF']).size(9);",
            "chart.render();"
        ],
        "description": "层叠柱状图 工作不正常"
    },
    "G2 图表布局说明": {
        "prefix": "G2 图表布局说明",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from '@ali/g2';",
            "// G2 对数据源格式的要求，仅仅是 JSON 数组，数组的每个元素是一个标准 JSON 对象。",
            "var data = [",
            "  {genre: 'Sports', sold: 275},",
            "  {genre: 'Strategy', sold: 115},",
            "  {genre: 'Action', sold: 120},",
            "  {genre: 'Shooter', sold: 350},",
            "  {genre: 'Other', sold: 150},",
            "];",
            "// Step 1: 创建 Chart 对象",
            "var chart = new G2.Chart({",
            "  id: 'mountNode',  // 指定图表容器 ID",
            "  height: 300,     // 指定图表高度",
            "  forceFit: true,",
            "  plotCfg: {",
            "    margin: 80,",
            "    border: {",
            "      stroke: '#999'",
            "    },",
            "    background: {",
            "      stroke: '#999',",
            "      fill: '#f80',",
            "      fillOpacity: 0.3",
            "    }",
            "  }",
            "});",
            "// Step 2: 载入数据源",
            "chart.source(data, {",
            "  genre: {",
            "    alias: '游戏种类' // 列定义，定义该属性显示的别名",
            "  },",
            "  sold: {",
            "    alias: '销售量',",
            "    max: 400",
            "  }",
            "});",
            "// Step 3：创建图形语法，绘制柱状图，由 genre 和 sold 两个属性决定图形位置，genre 映射至 x 轴，sold 映射至 y 轴",
            "chart.interval().position('genre*sold').color('genre')",
            "// Step 4: 渲染图表",
            "chart.render();",
            "console.log(JSON.stringify(chart.get('plotRange')));",
            ""
        ],
        "description": "G2 图表布局说明"
    },
    "垂直折叠树图": {
        "prefix": "垂直折叠树图",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from '@ali/g2@2.2.1-beta.1';",
            "// G2 对数据源格式的要求，仅仅是 JSON 数组，数组的每个元素是一个标准 JSON 对象。",
            "var data = [{",
            "  \"carrierCode\": \"balanceAdjustReport\",",
            "  \"carrierComposing\": \"cashAccountBalance+cashAccountOnWayAmount=instAccountBalance\",",
            "  \"carrierComposingDesc\": \"头寸账面余额+头寸未达金额=实存金额\",",
            "  \"carrierName\": \"银行余额调节表\",",
            "  \"children\": [{",
            "    \"carrierCode\": \"cashAccountBalance\",",
            "    \"carrierComposing\": \"cashAccountBeginingBalance+cashAccountAccrualAmount\",",
            "    \"carrierComposingDesc\": \"头寸期初余额+头寸发生额\",",
            "    \"carrierName\": \"头寸账面余额\",",
            "    \"children\": [{",
            "      \"carrierCode\": \"cashAccountBeginingBalance\",",
            "      \"carrierComposing\": \"\",",
            "      \"carrierComposingDesc\": \"\",",
            "      \"carrierName\": \"头寸账户期初余额\",",
            "      \"children\": [],",
            "      \"manageType\": \"account\",",
            "      \"mappingRule\": \"dafdsafasdf\",",
            "      \"numberOfChildren\": 0,",
            "      \"peekQuota\": \"\"",
            "    }, {",
            "      \"carrierCode\": \"cashAccountAccrualAmount\",",
            "      \"carrierComposing\": \"cashAccountDebitAccrualAmount-cashAccountCreditAccrualAmount\",",
            "      \"carrierComposingDesc\": \"头寸账户借方发生额-头寸账户贷方发生额\",",
            "      \"carrierName\": \"头寸账户发生额\",",
            "      \"children\": [{",
            "        \"carrierCode\": \"cashAccountDebitAccrualAmount\",",
            "        \"carrierComposing\": \"\",",
            "        \"carrierComposingDesc\": \"\",",
            "        \"carrierName\": \"头寸账户借方发生额\",",
            "        \"children\": [],",
            "        \"manageType\": \"account\",",
            "        \"mappingRule\": \"22333\",",
            "        \"numberOfChildren\": 0,",
            "        \"peekQuota\": \"\"",
            "      }, {",
            "        \"carrierCode\": \"cashAccountCreditAccrualAmount\",",
            "        \"carrierComposing\": \"\",",
            "        \"carrierComposingDesc\": \"\",",
            "        \"carrierName\": \"头寸账户贷方发生额\",",
            "        \"children\": [],",
            "        \"manageType\": \"account\",",
            "        \"mappingRule\": \"eewerwer\",",
            "        \"numberOfChildren\": 0,",
            "        \"peekQuota\": \"\"",
            "      }],",
            "      \"manageType\": \"account\",",
            "      \"mappingRule\": \"\",",
            "      \"numberOfChildren\": 2,",
            "      \"peekQuota\": \"\"",
            "    }],",
            "    \"manageType\": \"account\",",
            "    \"mappingRule\": \"\",",
            "    \"numberOfChildren\": 2,",
            "    \"peekQuota\": \"\"",
            "  }, {",
            "    \"carrierCode\": \"cashAccountOnWayAmount\",",
            "    \"carrierComposing\": \"\",",
            "    \"carrierComposingDesc\": \"\",",
            "    \"carrierName\": \"头寸账户在途金额\",",
            "    \"children\": [],",
            "    \"manageType\": \"account\",",
            "    \"mappingRule\": \"\",",
            "    \"numberOfChildren\": 0,",
            "    \"peekQuota\": \"\"",
            "  }, {",
            "    \"carrierCode\": \"instAccountBalance\",",
            "    \"carrierComposing\": \"\",",
            "    \"carrierComposingDesc\": \"\",",
            "    \"carrierName\": \"实存账户在途金额\",",
            "    \"children\": [],",
            "    \"manageType\": \"account\",",
            "    \"mappingRule\": \"\",",
            "    \"numberOfChildren\": 0,",
            "    \"peekQuota\": \"\"",
            "  }],",
            "  \"manageType\": \"report\",",
            "  \"mappingRule\": \"\",",
            "  \"numberOfChildren\": 3,",
            "  \"peekQuota\": \"\"",
            "}];",
            "function drawNode(cfg, group, collapsed, isLeaf) {",
            "    var x = cfg.x;",
            "    var y = cfg.y;",
            "    var pointSize = 5;",
            "    var width = cfg.size;",
            "    var height = 18;",
            "    var label = cfg.label;",
            "    var shape = group.addShape('rect', {",
            "      attrs: {",
            "        x: x - width / 2,",
            "        y: y - height / 2 ,",
            "        width: width,",
            "        height: height,",
            "        fill: '#fff',",
            "        cursor: isLeaf ? '' : 'pointer',",
            "        stroke: cfg.color",
            "      }",
            "    });",
            "    if (!isLeaf) {",
            "      y = y - height / 2 - pointSize - 2;",
            "      group.addShape('circle', {",
            "        attrs: {",
            "          r: pointSize,",
            "          x: x,",
            "          y: y,",
            "          fill: '#fff',",
            "          stroke: cfg.color // 可以直接设置颜色 cfg.color，也可以使用映射",
            "        }",
            "      });",
            "      var path = [];",
            "      path.push(['M', x - pointSize/2, y]);",
            "      path.push(['L', x + pointSize/2, y]);",
            "      if (collapsed) {",
            "        path.push(['M', x, y - pointSize/2]);",
            "        path.push(['L', x, y + pointSize/2]);",
            "      }",
            "      group.addShape('path', {",
            "        attrs: {",
            "          path: path,",
            "          stroke: cfg.color",
            "        }",
            "      });",
            "    }",
            "    return shape;",
            "  }",
            "  G2.Shape.registShape('point', 'collapsed', {",
            "    drawShape: function(cfg, group) {",
            "      return drawNode(cfg, group, true)",
            "    }",
            "  });",
            "  G2.Shape.registShape('point', 'expanded', {",
            "    drawShape: function(cfg, group) {",
            "      return drawNode(cfg, group, false);",
            "    }",
            "  });",
            "  G2.Shape.registShape('point', 'leaf', {",
            "    drawShape: function(cfg, group) {",
            "      return drawNode(cfg, group, false, true);",
            "    }",
            "  });",
            "  var Layout = G2.Layout;",
            "  // 使用layout，用户可以自己编写自己的layout",
            "  // 仅约定输出的节点 存在 id,x，y字段即可",
            "  var layout = new Layout.Tree({",
            "    nodes: data,",
            "    idField: 'carrierCode',",
            "    edgeFields: ['mappingRule']",
            "  });",
            "  var dx = layout.dx;",
            "  var nodes = layout.getNodes();",
            "  var edges = layout.getEdges();",
            "  var Stat = G2.Stat;",
            "  var chart = new G2.Chart({",
            "    id: 'mountNode',",
            "    width: 1000,",
            "    height: 500,",
            "    plotCfg: {",
            "      margin: [10,10]",
            "    },",
            "    animate: false",
            "  });",
            "  // 不显示title",
            "  chart.tooltip({",
            "    title: null",
            "  });",
            "  chart.legend('children', false);",
            "  chart.legend('carrierName', false);",
            "  renderTree(nodes, edges, dx);",
            "  function renderTree(nodes, edges, dx) {",
            "    chart.clear();",
            "    var height = Math.max(500, 26 / dx); // 最小高度 500",
            "    chart.changeSize(1000, height);",
            "    // 首先绘制 edges，点要在边的上面",
            "    // 创建单独的视图",
            "    var edgeView = chart.createView();",
            "    edgeView.source(edges);",
            "    edgeView.coord().scale(1, -1); //",
            "    edgeView.axis(false);",
            "    edgeView.tooltip(false);",
            "    // Stat.link 方法会生成 ..x, ..y的字段类型，数值范围是 0-1",
            "    edgeView.edge()",
            "      .position(Stat.link('source*target',nodes))",
            "      .shape('vhv')",
            "      .color('#ccc')",
            "      .label('mappingRule', {",
            "        offset: -30,",
            "        label: {",
            "          fill: 'red'",
            "        }",
            "      });",
            "    // 创建节点视图",
            "    var nodeView = chart.createView();",
            "    nodeView.coord().scale(1, -1); //'polar'",
            "    nodeView.axis(false);",
            "    // 节点的x,y范围是 0，1",
            "    // 因为边的范围也是 0,1所以正好统一起来",
            "    nodeView.source(nodes, {",
            "      x: {min: 0,max:1},",
            "      y: {min: 0, max:1},",
            "      value: {min: 0}",
            "    }, [",
            "      'collapsed','children'",
            "    ]);",
            "    nodeView.point().position('x*y').color('steelblue').size('carrierName', function(name) {",
            "      var length = name.length;",
            "      return length * 12 + 5 * 2;",
            "    }).label('carrierName', {",
            "      offset: 0,",
            "      labelEmit: true",
            "    })",
            "    .shape('children*collapsed', function(children,collapsed) {",
            "      if (children && children.length) {",
            "        if (collapsed) {",
            "          return 'collapsed';",
            "        } else {",
            "          return 'expanded';",
            "        }",
            "      }",
            "      return 'leaf';",
            "    })",
            "    .color('name')",
            "    .tooltip('carrierName*carrierComposingDesc');",
            "    chart.render();",
            "  }",
            "  chart.on('plotclick', function(ev){",
            "    var shape = ev.shape;",
            "    if (shape) {",
            "      var obj = shape.get('origin');",
            "      var id = obj._origin.id;",
            "      var node = layout.findNode(id);",
            "      if (node && node.children) {",
            "        node.collapsed = !node.collapsed;",
            "        layout.reset();",
            "        nodes = layout.getNodes();",
            "        edges = layout.getEdges();",
            "        dx = layout.dx;",
            "        // edgeView.changeData(edges);",
            "        renderTree(nodes, edges, dx);",
            "      }",
            "    }",
            "  })"
        ],
        "description": "垂直折叠树图"
    },
    "tooltip 内展示饼图": {
        "prefix": "tooltip 内展示饼图",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import $ from 'jquery';",
            "import G2 from '@ali/g2';",
            "$('<div id=\"c1\"></div><div style=\"display:none\"><div id=\"p1\" class=\"pie-container ac-tooltip\"><span>细节分步图</span><div id=\"c4\"></div></div></div>').appendTo('#mountNode');",
            "var Stat = G2.Stat;",
            "var data = [{name:'类别1',value:10,children:[{name:'类别11',value:18},{name:'类别12',value:10},{name:'类别13',value:7},{name:'类别14',value:12}]},{name:'类别2',value:8,children:[{name:'类别21',value:28},{name:'类别22',value:20},{name:'类别23',value:7},{name:'类别24',value:2}]},{name:'类别3',value:4,children:[{name:'类别31',value:14},{name:'类别32',value:12},{name:'类别33',value:6},{name:'类别34',value:1}]},{name:'类别4',value:9,children:[{name:'类别41',value:38},{name:'类别42',value:10},{name:'类别43',value:17},{name:'类别44',value:22}]}];",
            "  ",
            "var chart = new G2.Chart({",
            "  id: 'c1',",
            "  animate: false,",
            "  forceFit: true,",
            "  height: 300",
            "});",
            "var defs = {",
            "  'value': {",
            "    min: 0",
            "  }",
            "};",
            "chart.source(data, defs);",
            "chart.tooltip(true, {",
            "  offset: 50,",
            "  custom: true,",
            "  html: '#p1'",
            "});",
            "chart.interval().position('name*value').color('name'); // 绘制柱状图",
            "chart.render();",
            "// 绘制 tooltip 中显示的饼图",
            "var chart2 = new G2.Chart({",
            "  id: 'c4',",
            "  animate: false,",
            "  width: 150,",
            "  height: 150,",
            "  plotCfg: {",
            "    margin: [0, 0, 35]",
            "  }",
            "});",
            "chart2.coord('theta');",
            "chart2.legend('bottom', {",
            "  title: null",
            "});",
            "// 查找对应的数据",
            "function findObj(name) {",
            "  var rst = null",
            "  data.forEach(function(item) {",
            "    if (item.name === name) {",
            "      rst = item;",
            "    }",
            "  });",
            "  return rst;",
            "}",
            "// 监听 tooltip 改变事件",
            "chart.on('tooltipchange', function(ev) {",
            "  var item = ev.items[0]; // 获取tooltip要显示的内容",
            "  var name = item.name;",
            "  var obj = findObj(name);",
            "  if (obj) {",
            "    chart2.clear();",
            "    chart2.source(obj.children);",
            "    chart2.intervalStack().position(Stat.summary.percent('value')).color('name');",
            "    chart2.render();",
            "  }",
            "});"
        ],
        "description": "tooltip 内展示饼图"
    },
    "tooltip - 自定义模板+缩进": {
        "prefix": "tooltip - 自定义模板+缩进",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from '@ali/g2';",
            "var data = [",
            "  {\"month\":0,\"tem\":7,\"city\":\"tokyo\"},",
            "  {\"month\":1,\"tem\":6.9,\"city\":\"tokyo\"},",
            "  {\"month\":2,\"tem\":9.5,\"city\":\"tokyo\"},",
            "  {\"month\":3,\"tem\":14.5,\"city\":\"tokyo\"},",
            "  {\"month\":4,\"tem\":18.2,\"city\":\"tokyo\"},",
            "  {\"month\":5,\"tem\":21.5,\"city\":\"tokyo\"},",
            "  {\"month\":6,\"tem\":25.2,\"city\":\"tokyo\"},",
            "  {\"month\":7,\"tem\":26.5,\"city\":\"tokyo\"},",
            "  {\"month\":8,\"tem\":23.3,\"city\":\"tokyo\"},",
            "  {\"month\":9,\"tem\":18.3,\"city\":\"tokyo\"},",
            "  {\"month\":10,\"tem\":13.9,\"city\":\"tokyo\"},",
            "  {\"month\":11,\"tem\":9.6,\"city\":\"tokyo\"},",
            "  {\"month\":0,\"tem\":-0.2,\"city\":\"newYork\"},",
            "  {\"month\":1,\"tem\":0.8,\"city\":\"newYork\"},",
            "  {\"month\":2,\"tem\":5.7,\"city\":\"newYork\"},",
            "  {\"month\":3,\"tem\":11.3,\"city\":\"newYork\"},",
            "  {\"month\":4,\"tem\":17,\"city\":\"newYork\"},",
            "  {\"month\":5,\"tem\":22,\"city\":\"newYork\"},",
            "  {\"month\":6,\"tem\":24.8,\"city\":\"newYork\"},",
            "  {\"month\":7,\"tem\":24.1,\"city\":\"newYork\"},",
            "  {\"month\":8,\"tem\":20.1,\"city\":\"newYork\"},",
            "  {\"month\":9,\"tem\":14.1,\"city\":\"newYork\"},",
            "  {\"month\":10,\"tem\":8.6,\"city\":\"newYork\"},",
            "  {\"month\":11,\"tem\":2.5,\"city\":\"newYork\"},",
            "  {\"month\":0,\"tem\":-0.9,\"city\":\"berlin\"},",
            "  {\"month\":1,\"tem\":0.6,\"city\":\"berlin\"},",
            "  {\"month\":2,\"tem\":3.5,\"city\":\"berlin\"},",
            "  {\"month\":3,\"tem\":8.4,\"city\":\"berlin\"},",
            "  {\"month\":4,\"tem\":13.5,\"city\":\"berlin\"},",
            "  {\"month\":5,\"tem\":17,\"city\":\"berlin\"},",
            "  {\"month\":6,\"tem\":18.6,\"city\":\"berlin\"},",
            "  {\"month\":7,\"tem\":17.9,\"city\":\"berlin\"},",
            "  {\"month\":8,\"tem\":14.3,\"city\":\"berlin\"},",
            "  {\"month\":9,\"tem\":9,\"city\":\"berlin\"},",
            "  {\"month\":10,\"tem\":3.9,\"city\":\"berlin\"},",
            "  {\"month\":11,\"tem\":1,\"city\":\"berlin\"}",
            "];",
            "var chart = new G2.Chart({",
            "  id: 'mountNode',",
            "  //width: 800,",
            "  forceFit: true,",
            "  height: 300",
            "});",
            "var defs = {'month':{",
            "  type: 'cat',",
            "  values: [",
            "    '一月','二月','三月','四月','五月','六月',",
            "    '七月','八月','九月','十月','十一月','十二月']",
            "}};",
            "chart.source(data,defs);",
            "chart.tooltip(true, {",
            "  custom: true, // 使用自定义的 tooltip",
            "  itemTpl: '<li class=\"item-{name}\"><span style=\"color:{color}\">{name}</span>:{value}</li>'",
            "});",
            "chart.line().position('month*tem').color('city');",
            "chart.render();"
        ],
        "description": "tooltip - 自定义模板+缩进"
    },
    "guide - 添加辅助文本": {
        "prefix": "guide - 添加辅助文本",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import G2 from '@ali/g2';",
            "import $ from 'jquery';",
            "$.getJSON('https://os.alipayobjects.com/rmsportal/euNkioLVCGwJGWncDrUM.json', function(data) {",
            "  var Stat = G2.Stat;",
            "  G2.Global.setTheme('cheery');",
            "  var colors = G2.Global.colors['default'];",
            "  var chart = new G2.Chart({ // 创建图表",
            "    id : 'mountNode',",
            "    forceFit: true,",
            "    height: 300,",
            "    plotCfg: {",
            "      margin: [20, 90, 60, 80]",
            "    }",
            "  });",
            "  var defs = {",
            "    'cut': {",
            "      type: 'cat',",
            "      values:['Ideal', 'Premium', 'Very-Good', 'Good', 'Fair']",
            "    }",
            "  };",
            "  chart.source(data, defs); // 设置数据源",
            "  chart.legend(false);",
            "  chart.pointJitter().position('cut*depth').color('cut');",
            "  chart.guide().text(['Ideal', 67], '越完美的钻石切割工艺集中', {",
            "    fill: colors[0],",
            "    textAlign: 'center',",
            "    fontSize: 14",
            "  });",
            "  chart.guide().text(['Fair', 63], '越差的钻石切割工艺分散', {",
            "    fill: colors[4],",
            "    textAlign: 'center',",
            "    fontSize: 14",
            "  });",
            "  chart.render(); // 图表渲染",
            "});"
        ],
        "description": "guide - 添加辅助文本"
    },
    "guide - 添加辅助线": {
        "prefix": "guide - 添加辅助线",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import $ from 'jquery';",
            "import G2 from '@ali/g2';",
            "$.getJSON('https://os.alipayobjects.com/rmsportal/euNkioLVCGwJGWncDrUM.json', function(data) {",
            "  var Stat = G2.Stat;",
            "  var frame = new G2.Frame(data);",
            "  var caratAvg = G2.Frame.mean(frame,'carat'); // 计算克拉数均值",
            "  var priceAvg = G2.Frame.mean(frame,'price'); // 计算价格均值",
            "  var chart = new G2.Chart({ // 创建图表",
            "    id : 'mountNode',",
            "    //width: 800,",
            "    forceFit: true,",
            "    height: 300",
            "  });",
            " ",
            "  chart.source(frame); // 设置数据源",
            "  chart.point().position('carat*price');",
            "  chart.guide().line([caratAvg,0],[caratAvg,20000]);",
            "  chart.guide().line([0,priceAvg],[4,priceAvg]);",
            "  chart.render(); // 图表渲染",
            "});"
        ],
        "description": "guide - 添加辅助线"
    },
    "guide - 添加辅助图片": {
        "prefix": "guide - 添加辅助图片",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import $ from 'jquery';",
            "import G2 from '@ali/g2';",
            "$.getJSON('https://os.alipayobjects.com/rmsportal/euNkioLVCGwJGWncDrUM.json', function(data) {",
            "  var Stat = G2.Stat;",
            "  var chart = new G2.Chart({",
            "    id: 'mountNode',",
            "    forceFit: true,",
            "    height: 300",
            "  });",
            "  chart.source(data);",
            "  chart.interval().position(Stat.summary.count(Stat.bin.rect('depth'))).shape('hollowRect');",
            " ",
            "  chart.guide().image([55, 200], {",
            "    src: 'https://os.alipayobjects.com/rmsportal/IUYwZOlOpysCUsl.png',",
            "    width: 60,",
            "    height: 100",
            "  });",
            "  chart.render();",
            "});"
        ],
        "description": "guide - 添加辅助图片"
    },
    "guide - 添加辅助标记 tag": {
        "prefix": "guide - 添加辅助标记 tag",
        "scope": "javascript,typescript,javascriptreact,plaintext",
        "body": [
            "import $ from 'jquery';",
            "import G2 from '@ali/g2';",
            "$.getJSON('https://os.alipayobjects.com/rmsportal/euNkioLVCGwJGWncDrUM.json', function(data) {",
            "  G2.Global.setTheme('cheery');",
            "  var Stat = G2.Stat;",
            "  var frame = new G2.Frame(data);",
            "  var caratAvg = G2.Frame.mean(frame,'carat'); // 计算克拉数均值",
            "  var priceAvg = G2.Frame.mean(frame,'price'); // 计算价格均值",
            "  var chart = new G2.Chart({ // 创建图表",
            "    id : 'mountNode',",
            "    forceFit : true,",
            "    height : 300",
            "  });",
            "  chart.source(frame); // 设置数据源",
            "  chart.point().position('carat*price');",
            "  chart.guide().tag([caratAvg,0],[caratAvg,20000],'钻石均值:'+caratAvg.toFixed(2))",
            "  chart.guide().tag([0,priceAvg],[4,priceAvg],'价格均值' + priceAvg.toFixed(2))",
            "  chart.guide().tag([3.65,11688],[4.2,16000],'异常值')",
            "  chart.render(); // 图表渲染",
            "});"
        ],
        "description": "guide - 添加辅助标记 tag"
    }
}